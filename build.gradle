plugins {
    id 'java-library'
    id "de.undercouch.download" version "5.6.0"
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = 'https://maven.neoforged.net' }
    maven { url = 'https://github.com/ancientmc/ancientmc-maven/raw/maven/' }
}

configurations {
    inheritance
    jarsplitter
    forgeart
    mcinject
}

dependencies {
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'org.ow2.asm:asm:9.7.1'
    implementation 'org.ow2.asm:asm-tree:9.7.1'
    implementation 'net.minecraftforge:mapping-verifier:2.0.8:fatjar'
    implementation 'net.minecraftforge:srgutils:0.5.4'

    inheritance "net.neoforged.installertools:installertools:3.0.2"
    jarsplitter 'net.neoforged.installertools:jarsplitter:3.0.2'
    forgeart 'net.neoforged:AutoRenamingTool:2.0.8'
    mcinject 'de.oceanlabs.mcp:mcinjector:4.1-am'
}

import com.ancientmc.cuneiform.tasks.*
import com.ancientmc.cuneiform.tasks.csv.*
import com.ancientmc.cuneiform.util.*

ext {
    VERSION_ONE = 'a1.2.6' // The old version
    VERSION_TWO = 'b1.0' // The new version

    VERSION_MANIFEST = 'data/version_manifest.json'
}



task downloadVersionManifest(type: Download) {
    src 'https://piston-meta.mojang.com/mc/game/version_manifest_v2.json'
    dest VERSION_MANIFEST
}

[VERSION_ONE, VERSION_TWO].each { ver ->
    Paths paths = new Paths(ver)

    def json = task "downloadJson.${ver}"(type: Download, dependsOn: downloadVersionManifest) {
        src Json.getJsonUrl(file(paths.VERSION_MANIFEST), ver).toString()
        dest paths.JSON
    }

    def mcJar = task "downloadJar.${ver}"(type: Download, dependsOn: json) {
        src Json.getJarUrl(file(paths.JSON), "client").toString()
        dest paths.BASE_JAR
    }

    def libraries = task "downloadLibraries.${ver}"(type: DownloadLibraries, dependsOn: json) {
        def list = [file(paths.JSON), file(paths.JARDEP_JSON)].toList()
        jsons = list
        libs = file("data/versions/${ver}/game/lib/")
    }

    def inheritance = task "extractInheritance.${ver}"(type: JavaExec, dependsOn: mcJar) {
        mainClass = 'net.neoforged.installertools.ConsoleTool'
        classpath = files(project.configurations.getByName('inheritance'))
        args('--task', 'EXTRACT_INHERITANCE', '--input', paths.BASE_JAR, '--output', paths.INHERITANCE)
    }

    // Only generate version one, and only if we have a new version that's completely different from the one before it.
    // Otherwise we'll just update the TSRG
    def writeTsrg = task "writeTsrg.${ver}"(type: WriteTsrg, dependsOn: [mcJar, inheritance]) {
        jar = file(paths.BASE_JAR)
        tsrg = file(paths.INTERMEDIATE_TSRG)
        inheritanceJson = file(paths.INHERITANCE)
    }

    def splitJar = task "split.${ver}"(type: JavaExec, dependsOn: mcJar) {
        mainClass = 'net.neoforged.jarsplitter.ConsoleTool'
        classpath = files(project.configurations.getByName('jarsplitter'))
        args('--input', paths.BASE_JAR, '--slim', paths.SLIM_JAR, '--extra', paths.EXTRA_JAR, '--srg', paths.INTERMEDIATE_TSRG)
    }

    // Alpha 1.2.6 -> ERROR:     Override: ji/h ()V -- m_01158 -> m_00990 in task OverrideNames
    // This method's parent is private and therefore has a different access level, so the inheritance extractor took them as different files.
    // This is such a minor problem that we can just mark both methods with the same deobfuscated name in the CSV, to eliminate any inheritance issues.
    def verify = task "verifyTsrg.${ver}"(type: VerifyMappings) {
        jar = file(paths.SLIM_JAR)
        tsrg = file(paths.INTERMEDIATE_TSRG)
    }

    def mcinject = task "mcinject.${ver}"(type: JavaExec, dependsOn: splitJar) {
        mainClass = 'de.oceanlabs.mcp.mcinjector.MCInjector'
        classpath = files(project.configurations.getByName('mcinject'))
        args('--in', paths.SLIM_JAR, '--out', paths.INJECT_JAR, '--lvt=LVT', '--exc', paths.EXC, '--blacklist', paths.BLACKLIST)
    }

    def deobf = task "deobf.${ver}"(type: JavaExec, dependsOn: mcinject) {
        mainClass = 'net.neoforged.art.Main'
        classpath = files(project.configurations.getByName('forgeart'))
        args('--input', paths.INJECT_JAR, '--output', paths.SRG_JAR, '--map', paths.INTERMEDIATE_TSRG, '--src-fix', '--strip-sigs')
    }

    def cCsv = task "writeClassCsv.${ver}"(type: WriteClassCsv, dependsOn: splitJar) {
        jarFile = file(paths.SLIM_JAR)
        classCsv = file("data/versions/${ver}/mappings/csv/classes.csv")
    }

    def fCsv = task "writeFieldCsv.${ver}"(type: WriteFieldCsv, dependsOn: splitJar) {
        jarFile = file(paths.SLIM_JAR)
        fieldCsv = file("data/versions/${ver}/mappings/csv/fields.csv")
    }

    def mCsv = task "writeMethodCsv.${ver}"(type: WriteMethodCsv, dependsOn: [splitJar, inheritance]) {
        jarFile = file(paths.SLIM_JAR)
        inheritanceJson = file(paths.INHERITANCE)
        methodCsv = file("data/versions/${ver}/mappings/csv/methods.csv")
        paramCsv = file("data/versions/${ver}/mappings/csv/params.csv")
    }
}

task generateFreshMappings (type: GradleBuild) {
    List<String> list = Arrays.asList(
            "downloadVersionManifest", "downloadJson." + VERSION_ONE,
            "downloadJar." + VERSION_ONE, "writeTsrg." + VERSION_ONE,
            "split." + VERSION_ONE, "writeClassCsv." + VERSION_ONE,
            "writeFieldCsv." + VERSION_ONE, "writeMethodCsv." + VERSION_ONE
    )
    setTasks(list)
}


